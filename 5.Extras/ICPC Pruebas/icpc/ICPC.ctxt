#BlueJ class context
comment0.target=ICPC
comment0.text=\r\n\ Crea\ un\ red\ ICPC\ donde\ se\ pueden\ agregar\ y\ modificar\ intercepciones,\ rutas\ y\ sennales.\r\n\ \r\n\ @author\ Andres\ Felipe\ Arias\ Ajiaco\ y\ Sebastian\ David\ Blanco\ Rodriguez.\r\n\ @version\ 16/10/22\r\n
comment1.params=length\ width
comment1.target=ICPC(int,\ int)
comment1.text=\r\n\ Constructor\ de\ la\ red\ ICPC.\r\n\ @param\ int\ length,\ Longitud\ del\ canvas.\r\n\ @param\ int\ width,\ Ancho\ del\ canvas.\r\n
comment10.params=type\ intersectionA\ intersectionB\ SpeedLimit
comment10.target=void\ putSign(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment10.text=\r\n\ Metodo\ que\ annade\ una\ sennal\ a\ una\ ruta\ existente.\r\n\ @param\ String\ intersectionA,\ Color\ de\ la\ interseccionA\ (posicion\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ intersectionB,\ Color\ de\ la\ interseccionB\ (posicion\ final\ de\ la\ ruta).\r\n\ @param\ int\ speedLimit,\ Limite\ de\ velocidad.\r\n
comment11.params=color
comment11.target=void\ delIntersection(java.lang.String)
comment11.text=\r\n\ Metodo\ que\ borra\ una\ interceccion\ de\ la\ red\ de\ ICPC.\r\n\ @param\ String\ color,\ Color\ de\ la\ interceccion.\r\n
comment12.params=intersectionA\ intersectionB
comment12.target=void\ delRoad(java.lang.String,\ java.lang.String)
comment12.text=\r\n\ Metodo\ que\ borra\ una\ ruta.\r\n\ @param\ String\ intersectionA,\ Color\ de\ la\ interseccionA\ (posicion\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ intersectionB,\ Color\ de\ la\ interseccionB\ (posicion\ final\ de\ la\ ruta).\r\n
comment13.params=intersectionA\ intersectionB
comment13.target=void\ removeSign(java.lang.String,\ java.lang.String)
comment13.text=\r\n\ Metodo\ que\ borra\ una\ sennal.\r\n\ @param\ String\ IntersectionA,\ Color\ de\ la\ interseccionA\ (posicion\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ IntersectionB,\ Color\ de\ la\ interseccionB\ (posicion\ inicial\ de\ la\ ruta).\r\n
comment14.params=
comment14.target=java.lang.String[]\ intersections()
comment14.text=\r\n\ Metodo\ que\ perimte\ consultar\ las\ intercepciones.\r\n\ @return\ String[]\ intersections,\ Arreglo\ con\ las\ los\ colores\ de\ las\ intersecciones.\r\n
comment15.params=
comment15.target=java.lang.String[][]\ roads()
comment15.text=\r\n\ Metodo\ que\ perimte\ consultar\ las\ rutas.\r\n\ @return\ String[][]\ roads,\ Matriz\ con\ las\ intersecciones\ en\ la\ que\ se\ encuentra\ la\ ruta.\r\n
comment16.params=
comment16.target=java.lang.String[][]\ signs()
comment16.text=\r\n\ Metodo\ que\ perimte\ consultar\ las\ sennales.\r\n\ @return\ String[][]\ signs,\ Matriz\ con\ las\ intersecciones\ en\ la\ que\ se\ encuentra\ la\ sennal.\r\n
comment17.params=
comment17.target=java.lang.String[][]\ wrongSigns()
comment17.text=\r\n\ Metodo\ que\ determina\ las\ sennales\ erroneas.\r\n\ @return\ String[][]\ wrongSigns,\ Matriz\ con\ las\ intersecciones\ en\ la\ que\ se\ encuentra\ la\ sennal.\r\n
comment18.params=
comment18.target=java.lang.String[][]\ unNecessarySigns()
comment18.text=\r\n\ Metodo\ que\ determina\ las\ sennales\ innecesarias.\r\n\ @return\ String[][]\ unNecessarySigns,\ Matriz\ con\ las\ intersecciones\ en\ la\ que\ se\ encuentra\ la\ sennal.\r\n
comment19.params=
comment19.target=int\ totalSignsCost()
comment19.text=\r\n\ Metodo\ que\ da\ el\ costo\ total\ de\ poner\ las\ sennales\ necesarias.\r\n\ @return\ int\ totalCost,\ Costo\ total\ de\ poner\ la\ sennales.\r\n
comment2.params=length\ width\ cost
comment2.target=ICPC(int,\ int,\ int)
comment2.text=\r\n\ Constructor\ de\ la\ red\ ICPC.\r\n\ @param\ int\ length,\ Longitud\ del\ canvas.\r\n\ @param\ int\ width,\ Ancho\ del\ canvas.\r\n\ @param\ int\ cost,\ Costo\ de\ poner\ una\ sennnal.\r\n
comment20.params=
comment20.target=void\ makeVisible()
comment20.text=\r\n\ Metodo\ que\ hace\ visible\ la\ red\ de\ ICPC.\r\n
comment21.params=
comment21.target=void\ makeInvisible()
comment21.text=\r\n\ Metodo\ que\ hace\ invisible\ la\ red\ de\ ICPC.\r\n
comment22.params=
comment22.target=void\ finish()
comment22.text=\r\n\ Metodo\ que\ finaliza\ el\ programa.\r\n
comment23.params=
comment23.target=boolean\ ok()
comment23.text=\r\n\ Metodo\ que\ verifica\ la\ operacion\ indicada\ se\ pudo\ ejecutar\ en\ el\ simulador,\ este\ devolvera\ un\ mensaje\ de\ referencia.\r\n\ @return\ boolean,\ true\ si\ la\ operacion\ se\ realiz\u00F3\ satisfactoriamente,\ de\ lo\ contrario\ false.\r\n
comment24.params=x\ y
comment24.target=boolean\ verificarPosInterseccion(int,\ int)
comment24.text=\r\n\ Metodo\ que\ verifica\ si\ dos\ posiciones\ de\ una\ interseccion\ ya\ existen.\r\n\ @param\ int\ x,\ posicion\ x\ de\ la\ interseccion.\r\n\ @param\ int\ y,\ posicion\ y\ de\ la\ interseccion.\r\n
comment25.params=parteKey
comment25.target=java.util.ArrayList\ verificarKeyRuta(java.lang.String)
comment25.text=\r\n\ Metodo\ que\ permite\ obtener\ la\ clave\ completa\ de\ un\ HashMap\ con\ solo\ una\ parte.\r\n\ @param\ String\ parteKey,\ parte\ que\ se\ tiene\ de\ la\ Key.\r\n
comment26.params=parteKey
comment26.target=java.util.ArrayList\ verificarKeySennal(java.lang.String)
comment26.text=\r\n\ Metodo\ que\ permite\ obtener\ la\ clave\ completa\ de\ un\ HashMap\ con\ solo\ una\ parte.\r\n\ @param\ String\ parteKey,\ parte\ que\ se\ tiene\ de\ la\ Key.\r\n
comment27.params=intersectionA\ intersectionB
comment27.target=boolean\ compararKeyRuta(java.lang.String,\ java.lang.String)
comment27.text=\r\n\ Metodo\ que\ verifica\ que\ dos\ intersecciones\ no\ tengan\ una\ ruta.\r\n\ @param\ String\ intersectionA,\ color\ de\ la\ interseccion\ A.\r\n\ @param\ String\ intersectionB,\ color\ de\ la\ interseccion\ B.\r\n
comment28.params=intersectionA\ intersectionB
comment28.target=boolean\ compararKeySennal(java.lang.String,\ java.lang.String)
comment28.text=\r\n\ Metodo\ que\ verifica\ que\ dos\ intersecciones\ no\ tengan\ una\ ruta.\r\n\ @param\ String\ intersectionA,\ color\ de\ la\ interseccion\ A.\r\n\ @param\ String\ intersectionB,\ color\ de\ la\ interseccion\ B.\r\n
comment29.params=intersectionA\ intersectionB
comment29.target=java.lang.String\ obtenerKeyRuta(java.lang.String,\ java.lang.String)
comment29.text=\r\n\ Metodo\ que\ verifica\ si\ la\ key\ existe\ y\ si\ no\ da\ la\ que\ si\ existe.\r\n\ @param\ String\ intersectionA,\ color\ de\ la\ interseccion\ A.\r\n\ @param\ String\ intersectionB,\ color\ de\ la\ interseccion\ B.\r\n
comment3.params=cost\ routesSpeedLimits
comment3.target=ICPC(int,\ int[][])
comment3.text=\r\n\ Constructor\ de\ la\ red\ ICPC.\r\n\ @param\ int\ cost,\ Costo\ de\ poner\ una\ sennal.\r\n\ @param\ int[][]\ routesSpeedLimist,\ Matriz\ con\ la\ red\ ICPC.\r\n
comment30.params=intersectionA\ intersectionB
comment30.target=java.lang.String\ inversaKeyRuta(java.lang.String,\ java.lang.String)
comment30.text=\r\n\ Metodo\ que\ verifica\ si\ la\ key\ existe\ y\ si\ no\ da\ la\ que\ si\ existe.\r\n\ @param\ String\ intersectionA,\ color\ de\ la\ interseccion\ A.\r\n\ @param\ String\ intersectionB,\ color\ de\ la\ interseccion\ B.\r\n
comment31.params=color
comment31.target=java.lang.String\ numberColor(java.lang.String)
comment31.text=\r\n\ Metodo\ que\ determina\ un\ color\ especifico\ para\ cada\ numero.\r\n\ @param\ int\ numero,\ numero\ por\ el\ que\ se\ identifica\ la\ interseccion.\r\n
comment32.params=color
comment32.target=java.lang.String\ numberColor(int)
comment32.text=\r\n\ Metodo\ que\ determina\ el\ entero\ de\ color\ especifico.\r\n\ @param\ int\ numero,\ numero\ por\ el\ que\ se\ identifica\ la\ interseccion.\r\n
comment33.params=
comment33.target=int\ randomNumber()
comment33.text=\r\n\ Metodo\ que\ genera\ un\ numero\ unico.\r\n\ @return\ int\ numero,\ numero\ random.\r\n
comment34.params=
comment34.target=int\ maxSpeed()
comment34.text=\r\n\ Metodo\ que\ da\ la\ velocidad\ maxima\ de\ un\ arreglo.\r\n\ @return\ int\ max,\ Velocidad\ maxima.\r\n
comment35.params=interseccionA\ interseccionB
comment35.target=boolean\ ifIsHermit(java.lang.String,\ java.lang.String)
comment35.text=\r\n\ Metodo\ que\ verifica\ si\ una\ interseccion\ es\ de\ tipo\ hermit\ y\ si\ ya\ tiene\ ruta\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment36.params=interseccionA\ interseccionB
comment36.target=void\ ifIsNeedy(java.lang.String,\ java.lang.String)
comment36.text=\r\n\ Metodo\ que\ verifica\ si\ una\ interseccion\ es\ de\ tipo\ needy\ y\ si\ no\ tiene\ rutas\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment37.params=interseccionA\ interseccionB
comment37.target=boolean\ ifIsRebel(java.lang.String,\ java.lang.String)
comment37.text=\r\n\ Metodo\ que\ verifica\ si\ una\ ruta\ es\ de\ tipo\ rebel\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment38.params=interseccionA\ interseccionB
comment38.target=boolean\ ifIsFixed(java.lang.String,\ java.lang.String)
comment38.text=\r\n\ Metodo\ que\ verifica\ si\ una\ ruta\ es\ de\ tipo\ fixed\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment39.params=color
comment39.target=boolean\ ifIsFixedInterseccion(java.lang.String)
comment39.text=\r\n\ Metodo\ que\ verifica\ si\ una\ interseccion\ tiene\ alguna\ ruta\ de\ tipo\ fixed\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment4.params=color\ x\ y
comment4.target=void\ addIntersection(java.lang.String,\ int,\ int)
comment4.text=\r\n\ Metodo\ que\ annade\ una\ interseccion\ a\ la\ red\ ICPC.\r\n\ @param\ String\ color,\ Cadena\ con\ el\ color\ de\ la\ interseccion.\r\n\ @param\ int\ x,\ Posicion\ en\ x\ de\ la\ interseccion.\r\n\ @param\ int\ y,\ Posicion\ en\ y\ de\ la\ interseccion.\r\n
comment40.params=intersectionA\ intersectionB\ SpeedLimit
comment40.target=void\ ifIsTwinAdd(java.lang.String,\ java.lang.String,\ int)
comment40.text=\r\n\ Metodo\ que\ verifica\ si\ una\ sennal\ es\ tipo\ twin\ y\ annade\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment41.params=intersectionA\ intersectionB
comment41.target=void\ ifIsTwinDelete(java.lang.String,\ java.lang.String)
comment41.text=\r\n\ Metodo\ que\ verifica\ si\ una\ sennal\ es\ tipo\ twiny\ la\ elimina\r\n\ @param\ String\ interseccionA,\ interseccion\ A.\r\n\ @param\ String\ interseccionB,\ interseccion\ B.\r\n
comment42.params=type
comment42.target=boolean\ typeIntersectionExist(java.lang.String)
comment42.text=\r\n\ Metodo\ que\ verifica\ si\ el\ tipo\ de\ interseccion\ existe;\r\n\ @param\ String\ type,\ tipo\ de\ la\ interseccion.\r\n
comment43.params=type
comment43.target=boolean\ typeRouteExist(java.lang.String)
comment43.text=\r\n\ Metodo\ que\ verifica\ si\ el\ tipo\ de\ ruta\ existe.\r\n\ @param\ String\ type,\ tipo\ de\ la\ ruta.\r\n
comment44.params=type
comment44.target=boolean\ typeSennalExist(java.lang.String)
comment44.text=\r\n\ Metodo\ que\ verifica\ si\ el\ tipo\ de\ sennal\ existe.\r\n\ @param\ String\ type,\ tipo\ de\ la\ sennal.\r\n
comment45.params=
comment45.target=int\ getMinimunSpeedL()
comment45.text=\r\n\ Metodo\ que\ obtiene\ el\ limite\ de\ velocidad\ minimo\ de\ las\ rutas;\r\n
comment46.params=x\ y
comment46.target=boolean\ verificaCanvas(int,\ int)
comment46.text=\r\n\ Metodo\ que\ verifca\ que\ una\ interseccion\ este\ dentro\ del\ canvas.\r\n\ @param\ int\ x,\ posicion\ x\ \ de\ la\ interseccion.\r\n\ @param\ int\ y,\ posicion\ y\ \ de\ la\ interseccion.\ \r\n
comment5.params=type\ color\ x\ y
comment5.target=void\ addIntersection(java.lang.String,\ java.lang.String,\ int,\ int)
comment5.text=\r\n\ Metodo\ que\ annade\ una\ interseccion\ a\ la\ red\ ICPC.\r\n\ @param\ String\ type,\ tipo\ de\ interseccion\r\n\ @param\ String\ color\ Cadena\ con\ el\ color\ de\ la\ interseccion.\r\n\ @param\ int\ x,\ Posicion\ en\ x\ de\ la\ interseccion.\r\n\ @param\ int\ y,\ Posicion\ en\ y\ de\ la\ interseccion.\r\n
comment6.params=intersectionA\ intersectionB
comment6.target=void\ addRoute(java.lang.String,\ java.lang.String)
comment6.text=\r\n\ Metodo\ que\ annade\ una\ ruta\ a\ la\ red\ ICPC.\r\n\ @param\ String\ intersectionA,\ Color\ con\ la\ interseccion\ A\ (posicion\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ intersectionB,\ Color\ con\ la\ interseccion\ B\ (posicion\ final\ de\ la\ ruta).\r\n
comment7.params=type\ intersectionA\ intersectionB
comment7.target=void\ addRoute(java.lang.String,\ java.lang.String,\ java.lang.String)
comment7.text=\r\n\ Metodo\ que\ annade\ una\ ruta\ a\ la\ red\ ICPC.\r\n\ @param\ String\ intersectionA,\ Color\ con\ la\ interseccion\ A\ (posicion\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ intersectionB,\ Color\ con\ la\ interseccion\ B\ (posicion\ final\ de\ la\ ruta).\r\n
comment8.params=intersectionA\ intersectionB\ speedLimit
comment8.target=void\ routeSpeedLimit(java.lang.String,\ java.lang.String,\ int)
comment8.text=\r\n\ Metodo\ que\ le\ asigna\ un\ limite\ de\ velocidad\ a\ una\ ruta\ existente.\r\n\ @param\ String\ intersectionA,\ Color\ con\ la\ interseccion\ A\ (punto\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ intersectionB,\ Color\ con\ la\ interseccion\ B\ (punto\ final\ de\ la\ ruta).\r\n\ @param\ int\ speedLimit,\ limite\ de\ velocidad\ de\ la\ rura.\r\n
comment9.params=intersectionA\ intersectionB\ SpeedLimit
comment9.target=void\ putSign(java.lang.String,\ java.lang.String,\ int)
comment9.text=\r\n\ Metodo\ que\ annade\ una\ sennal\ a\ una\ ruta\ existente.\r\n\ @param\ String\ intersectionA,\ Color\ de\ la\ interseccionA\ (posicion\ inicial\ de\ la\ ruta).\r\n\ @param\ String\ intersectionB,\ Color\ de\ la\ interseccionB\ (posicion\ final\ de\ la\ ruta).\r\n\ @param\ int\ speedLimit,\ Limite\ de\ velocidad.\r\n
numComments=47
